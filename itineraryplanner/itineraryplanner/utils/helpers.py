# -*- coding: utf-8 -*-
import copy
import calendar
import datetime
import itertools
import os
from random import randrange
import re
import uuid
from django.template.defaultfilters import slugify




def _slug_strip(value, separator=None):
    """
    Cleans up a slug by removing slug separator characters that occur at the
    beginning or end of a slug. A separator may occur at the end of a slug if
    for example a slug generated by django has been shortened and the end of
    the shortened slug happens to be a separator. (e.g. slug=test-slug,
    slug[:5] would result in the slug 'test-')

    If an alternate separator has been supplied, any instances of the default
    '-' separator will be replaced with the new separator.
    """
    if separator == '-' or not separator:
        re_sep = '-'
    else:
        re_sep = '(?:-|%s)' % re.escape(separator)
        value = re.sub('%s+' % re_sep, separator, value)
    return re.sub(r'^%s+|%s+$' % (re_sep, re_sep), '', value)


def unique_slugify(instance, value, slug_field_name='slug', queryset=None,
                   slug_separator='-'):
    """
    Calculates a unique slug of ``value`` for an instance.
    ``slug_field_name`` should be a string matching the name of the field to
    store the slug in (and the field to check against for uniqueness).
    ``queryset`` usually doesn't need to be explicitly provided - it'll default
    to using the ``.all()`` queryset from the model's default manager.
    """

    # Grab an instance of the slug field for the working model based on the
    # name of the slug field for that model. Default is 'slug'
    slug_field = instance._meta.get_field(slug_field_name)
    # Get the slug field of the model instance to work on. This is the value
    # we'd like to set.
    slug = getattr(instance, slug_field.attname)
    max_length = slug_field.max_length

    # Generate an initial slug using the django helper slugify(). Chop the
    # generated slug down to our max_length value if necessary
    slug = slugify(value)
    if max_length:
        slug = slug[:max_length]
    slug = _slug_strip(slug, slug_separator)
    original_slug = slug

    # Create a queryset, excluding the current instance.
    if not queryset:
        queryset = instance.__class__._default_manager.all()
        if instance.pk:
            queryset = queryset.exclude(pk=instance.pk)

    # Find a unique slug. If one matches, at '-2' to the end and try again
    # (then '-3', etc).
    for x in itertools.count(1):
        if not queryset.filter(**{slug_field_name: slug}).exists():
            break

        # Truncate the original slug dynamically. Minus 1 for the hyphen.
        slug = "%s-%d" % (original_slug[:max_length - len(str(x)) - 1], x)

    setattr(instance, slug_field.attname, slug)


def create_pddl_problem(itinerary):
    places = itinerary.get_itinerary_places()
    steps = itinerary.steps.all()
    travel_methods = itinerary.get_all_travel_methods()
    print("............creating objects....")
    header = "(define (problem {})\n\
        (:domain touristinfo)".format(itinerary.slug)
    objects = "\n\t(:objects hotel"
    init = "\t(:init \n"
    times = ""
    tourist_location = "\t\t(at tourist1 {0})\n".format("hotel") #TODO: real data
    paths = ""
    traveltimes = ""
    visit_for = ""
    goals = "\t(:goal\n\t\t(and\n\t\t\t(at tourist1 hotel)\n"
    constraints = "\t(:constraints"
    metrics = "\t(:metric minimize\n\t\t(+\n\t\t\t(total-time)\n\t\t\t(* {}\
    \n\t\t\t\t(+\n".format(1000)
    for step in steps:
        # first we get the paths
        #if step.origin.slug != place:
        origin = step.origin.slug
        destination = step.destination.slug
        method = step.get_travel_method()
        camelCase = step.origin.get_camelCase()
        # we need the duration in minutes rounded
        duration = round(step.duration/60,2)
        paths += "\t\t(path {0} {1})\n".format(origin, destination)
        # afterwards we need to get the traveltimes per traveling method
        # for travel_method in travel_methods:
        traveltimes += "\t\t(=(traveltime {0} {1} {2}){3})\n".format(method, origin, destination,duration)
        traveltimes += "\t\t(=(traveltime {0} {1} {2}){3})\n".format(method, "hotel", destination,randrange(5,45))
        traveltimes += "\t\t(=(traveltime {0} {1} {2}){3})\n".format(method, origin, "hotel",randrange(5,45))
        # then we get the opening and closing times if they exist. otherwise none
        if step.origin.opens != "":
            times +="\t\t(at {0} (open {1}))\n".format(step.origin.opens, step.origin.slug)
            times +="\t\t(at {0} (not (open {1})))\n".format(step.origin.closes, step.origin.slug)    
        # getting the duration of the visits.
        visit_for += "\t\t(=(visitfor {0} tourist1){1})\n".format(origin,30)
        # getting the goals
        goals += "\t\t\t(preference {0} (at end (visited tourist1 {1})))\n".format(camelCase,origin)
        metrics += "\t\t\t\t\t(is-violated {})\n".format(camelCase)
    visit_for+="\t)\n" # ending of visit_for
    goals+="\t\t)\n\t)\n" # ending of goals
    metrics+="\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)"
    for place in places:
        objects+="{} ".format(place)
        paths += "\t\t(path {0} {1})\n".format("hotel", place)
        paths += "\t\t(path {0} {1})\n".format(place, "hotel")
    objects+=" - location tourist1 - tourist bus walk - mode)\n"    
    print(header,objects,init,times,tourist_location,times,paths,traveltimes,visit_for,goals,constraints)
